/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Sun Jul 17 2022 15:03:37 GMT+0700 (Western Indonesia Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var door, kursi_2, kursi_1, lakmus_merah, lakmus_biru, vinegar___red, vinegar___blue, detergent___red, detergent___blue, salt___red, salt___blue;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

    // inherit some save params
    newTex.encoding = oldTex.encoding;
    newTex.wrapS = oldTex.wrapS;
    newTex.wrapT = oldTex.wrapT;

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (var texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}



// snapToObject puzzle
function snapToObject(objName, targetObjName) {
    if (!objName || !targetObjName)
        return;
    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;
    obj.copyTransform(targetObj);
    obj.updateMatrixWorld(true);
}



// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.copy(targetObj.matrixWorld).invert();
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}



function _pGetInputSource(controller) {
    if (controller && controller.userData.v3d && controller.userData.v3d.inputSource) {
        return controller.userData.v3d.inputSource
    } else {
        return null;
    }
};

function _pTraverseNonControllers(obj, callback) {

    if (obj.name.startsWith('XR_CONTROLLER_'))
        return;

    callback(obj);

    var children = obj.children;

    for (var i = 0, l = children.length; i < l; i++) {

        _pTraverseNonControllers(children[i], callback);

    }

};

function _pXRGetIntersections(controller) {

    controller.updateMatrixWorld(true);

    _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);

    var objList = [];

    _pTraverseNonControllers(appInstance.scene, function(obj) {
        objList.push(obj);
    });

    var raycaster = new v3d.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);

    return raycaster.intersectObjects(objList);

}

function _pXROnSelect(event) {

    if (!_pGlob.objClickInfo)
        return;

    var controller = event.target;

    var intersections = _pXRGetIntersections(controller);

    if (intersections.length > 0) {
        var intersection = intersections[0];
        var obj = intersection.object;

        // save the object for the pickedObject block
        _pGlob.pickedObject = getPickedObjectName(obj);

        _pGlob.objClickInfo.forEach(function(el) {
            var isPicked = obj && objectsIncludeObj(retrieveObjectNames(el.objSelector), getPickedObjectName(obj));
            el.callbacks[isPicked ? 0 : 1]();
        });
    } else {
        _pGlob.objClickInfo.forEach(function(el) {
            // missed
            el.callbacks[1]();
        });
    }

}



// enterVRMode puzzle
function enterVRMode(refSpace, enterCb, exitCb, unAvailableCb) {

    var DEFAULT_DEPTH = 10;

    var _rayReticleDepth = [];
    var _hoveredObjects = [];

    function onControllerHover() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            var intersections = _pXRGetIntersections(controller);

            if (intersections.length > 0) {
                var intersection = intersections[0];
                var obj = intersection.object;
                _rayReticleDepth[i] = intersection.distance;
            } else {
                var obj = null;
                _rayReticleDepth[i] = DEFAULT_DEPTH;
            }

            controller.children.forEach(function(child) {
                if (child.name.indexOf('_RAY') > -1) {
                    child.scale.z = _rayReticleDepth[i];
                } else if (child.name.indexOf('_RETICLE') > -1) {
                    // reduces crossing artefacts
                    child.position.z = -0.95 * _rayReticleDepth[i];
                }
            });

            var prevHovered = _hoveredObjects[i];
            var currHovered = obj ? getPickedObjectName(obj) : '';

            if (prevHovered == currHovered) {
                continue;
            }

            // first - all "out" callbacks, then - all "over"
            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = prevHovered;
                    el.callbacks[1]();
                }
            });

            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = currHovered;
                    el.callbacks[0]();
                }
            });

            _hoveredObjects[i] = currHovered;
        }
    }

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }

    appInstance.initWebXR('immersive-vr', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            // clicks
            controller.addEventListener('select', _pXROnSelect);
            if (v3d.PL.editorEventListeners)
                v3d.PL.editorEventListeners.push([controller, 'select', _pXROnSelect]);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
                if (v3d.PL.editorEventListeners)
                    v3d.PL.editorEventListeners.push([controller, pair[0], pair[1]]);
            });
        }

        // hovers
        if (_pGlob.objHoverInfo && _pGlob.objHoverInfo.length && appInstance.renderCallbacks.indexOf(onControllerHover) == -1)
            appInstance.renderCallbacks.push(onControllerHover);

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pXROnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        var cbIdx = appInstance.renderCallbacks.indexOf(onControllerHover);
        if (cbIdx != -1)
            appInstance.renderCallbacks.splice(cbIdx, 1);

        _pGlob.xrSessionAcquired = false;

        exitCb();
    });
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



door = 'close';
registerOnHover('pintu', false, function() {
  outline('pintu', 'ENABLE');
  handleAnnot(true, 'Open', 'pintu', '', '', undefined);
}, function() {
  outline('pintu', 'DISABLE');
  handleAnnot(false, '', 'pintu', '', '', undefined);
});
registerOnClick('pintu', false, false, [0,1,2], function() {
  if (door == 'close') {

    operateAnimation('PLAY', 'pintu', null, null, 'LoopOnce', 1,
            function() {
      tweenCamera('masuk 1', 'masuk 2 p', 3, function() {
        tweenCamera('masuk 2 p', 'masuk 2 d', 3, function() {
          tweenCamera('masuk 3 p', 'masuk 3 d', 3, function() {
            door = 'open';
          }, 0);
        }, 0);
      }, 0);
    }, undefined, false);

        } else if (door == 'open') {

    operateAnimation('PLAY', 'pintu', null, null, 'LoopOnce', 1,
            function() {}, undefined, true);

        door = 'close';
  }
}, function() {});

changeVis('slide.001', false);
changeVis('slide.002', false);
registerOnHover(['tv', 'Layar TV'], false, function() {
  outline('tv', 'ENABLE');
  handleAnnot(true, 'Start Experiment', 'tv', '', '', undefined);
}, function() {
  outline('tv', 'DISABLE');
  handleAnnot(false, '', 'tv', '', '', undefined);
});
registerOnClick(['tv', 'Layar TV'], false, false, [0,1,2], function() {
  tweenCamera('masuk 3 d', 'mulai 1', 3, function() {
    tweenCamera('masuk 3 d', 'mulai 2', 3, function() {
      tweenCamera('mulai 2', 'mulai 3', 3, function() {
        tweenCamera('mulai 4', 'mulai 5', 3, function() {}, 0);
      }, 0);
    }, 0);
  }, 0);
}, function() {});

kursi_2 = 'move 0';
registerOnHover('kursi gerak.001', false, function() {
  outline('kursi gerak.001', 'ENABLE');
}, function() {
  outline('kursi gerak.001', 'DISABLE');
});
registerOnClick('kursi gerak.001', false, false, [0,1,2], function() {
  if (kursi_2 == 'move 0') {

    operateAnimation('PLAY', 'kursi gerak.001', null, null, 'LoopOnce', 1,
            function() {
      kursi_2 = 'move 1';
    }, undefined, false);

        } else if (kursi_2 == 'move 1') {

    operateAnimation('PLAY', 'kursi gerak.001', null, null, 'LoopOnce', 1,
            function() {}, undefined, true);

        kursi_2 = 'move 0';
  }
}, function() {});

kursi_1 = 'move 0';
registerOnHover('kursi gerak', false, function() {
  outline('kursi gerak', 'ENABLE');
}, function() {
  outline('kursi gerak', 'DISABLE');
});
registerOnClick('kursi gerak', false, false, [0,1,2], function() {
  if (kursi_1 == 'move 0') {

    operateAnimation('PLAY', 'kursi gerak', null, null, 'LoopOnce', 1,
            function() {
      kursi_1 = 'move 1';
    }, undefined, false);

        } else if (kursi_1 == 'move 1') {

    operateAnimation('PLAY', 'kursi gerak', null, null, 'LoopOnce', 1,
            function() {}, undefined, true);

        kursi_1 = 'move 0';
  }
}, function() {});

registerOnClick('slide.001', false, false, [0,1,2], function() {
  replaceTexture('Layar TV', 'materi-praktikum.png', './materi-praktikum.png', function() {});
}, function() {});
registerOnClick('slide.002', false, false, [0,1,2], function() {
  replaceTexture('Layar TV', 'materi-praktikum.png', './hasil-praktikum.png', function() {});
}, function() {});

eventHTMLElem('click', 'vr-button', true, function(event) {
  enterVRMode('ORIGIN', function() {
    snapToObject('Camera', 'VR Cam');
    makeParent('Camera', 'VR Cam');
  }, function() {}, function() {});
});

registerOnHover('1 Glass of Salt Water', false, function() {
  outline('1 Glass of Salt Water', 'ENABLE');
  handleAnnot(true, 'Salt Water', '1 Glass of Salt Water', '', '', undefined);
}, function() {
  outline('1 Glass of Salt Water', 'DISABLE');
  handleAnnot(false, '', '1 Glass of Salt Water', '', '', undefined);
});
registerOnHover('2 Glass of Detergent Water', false, function() {
  outline('2 Glass of Detergent Water', 'ENABLE');
  handleAnnot(true, 'Detergent Water', '2 Glass of Detergent Water', '', '', undefined);
}, function() {
  outline('2 Glass of Detergent Water', 'DISABLE');
  handleAnnot(false, '', '2 Glass of Detergent Water', '', '', undefined);
});
registerOnHover('3 Glass of Vinegar Water', false, function() {
  outline('3 Glass of Vinegar Water', 'ENABLE');
  handleAnnot(true, 'Vinegar Water', '3 Glass of Vinegar Water', '', '', undefined);
}, function() {
  outline('3 Glass of Vinegar Water', 'DISABLE');
  handleAnnot(false, '', '3 Glass of Vinegar Water', '', '', undefined);
});

registerOnHover('vinegar water - blue litmus', false, function() {
  outline('vinegar water - blue litmus', 'ENABLE');
  handleAnnot(true, 'Vinegar Water', 'vinegar water - blue litmus', '', '', undefined);
}, function() {
  outline('vinegar water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'vinegar water - blue litmus', '', '', undefined);
});
registerOnHover('vinegar water - red litmus', false, function() {
  outline('vinegar water - red litmus', 'ENABLE');
  handleAnnot(true, 'Vinegar Water', 'vinegar water - red litmus', '', '', undefined);
}, function() {
  outline('vinegar water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'vinegar water - red litmus', '', '', undefined);
});

registerOnHover('hasil - vinegar water - blue litmus', false, function() {
  outline('hasil - vinegar water - blue litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - vinegar water - blue litmus', '', '', undefined);
}, function() {
  outline('hasil - vinegar water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - vinegar water - blue litmus', '', '', undefined);
});
registerOnHover('hasil - vinegar water - red litmus', false, function() {
  outline('hasil - vinegar water - red litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - vinegar water - red litmus', '', '', undefined);
}, function() {
  outline('hasil - vinegar water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - vinegar water - red litmus', '', '', undefined);
});

registerOnHover('slide.001', false, function() {
  outline('slide.001', 'ENABLE');
}, function() {
  outline('slide.001', 'DISABLE');
});
registerOnHover('slide.002', false, function() {
  outline('slide.002', 'ENABLE');
}, function() {
  outline('slide.002', 'DISABLE');
});

registerOnHover('detergent water - blue litmus', false, function() {
  outline('detergent water - blue litmus', 'ENABLE');
  handleAnnot(true, 'Detergent Water', 'detergent water - blue litmus', '', '', undefined);
}, function() {
  outline('detergent water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'detergent water - blue litmus', '', '', undefined);
});
registerOnHover('detergent water - red litmus', false, function() {
  outline('detergent water - red litmus', 'ENABLE');
  handleAnnot(true, 'Detergent Water', 'detergent water - red litmus', '', '', undefined);
}, function() {
  outline('detergent water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'detergent water - red litmus', '', '', undefined);
});

registerOnHover('hasil - detergent water - blue litmus', false, function() {
  outline('hasil - detergent water - blue litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - detergent water - blue litmus', '', '', undefined);
}, function() {
  outline('hasil - detergent water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - detergent water - blue litmus', '', '', undefined);
});
registerOnHover('hasil - detergent water - red litmus', false, function() {
  outline('hasil - detergent water - red litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - detergent water - red litmus', '', '', undefined);
}, function() {
  outline('hasil - detergent water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - detergent water - red litmus', '', '', undefined);
});

registerOnHover(['tutup lakmus merah', 'wadah lakmus merah'], false, function() {
  outline(['tutup lakmus merah', 'wadah lakmus merah'], 'ENABLE');
  handleAnnot(true, 'Red Litmus', 'wadah lakmus merah', '', '', undefined);
}, function() {
  outline(['tutup lakmus merah', 'wadah lakmus merah'], 'DISABLE');
  handleAnnot(false, '', 'wadah lakmus merah', '', '', undefined);
});
registerOnHover(['tutup lakmus biru', 'wadah lakmus biru '], false, function() {
  outline(['tutup lakmus biru', 'wadah lakmus biru '], 'ENABLE');
  handleAnnot(true, 'Blue Litmus', 'wadah lakmus biru ', '', '', undefined);
}, function() {
  outline(['tutup lakmus biru', 'wadah lakmus biru '], 'DISABLE');
  handleAnnot(false, '', 'wadah lakmus biru ', '', '', undefined);
});

registerOnHover('salt water - blue litmus', false, function() {
  outline('salt water - blue litmus', 'ENABLE');
  handleAnnot(true, 'Salt Water', 'salt water - blue litmus', '', '', undefined);
}, function() {
  outline('salt water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'salt water - blue litmus', '', '', undefined);
});
registerOnHover('salt water - red litmus', false, function() {
  outline('salt water - red litmus', 'ENABLE');
  handleAnnot(true, 'Salt Water', 'salt water - red litmus', '', '', undefined);
}, function() {
  outline('salt water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'salt water - red litmus', '', '', undefined);
});

registerOnHover('hasil - salt water - blue litmus', false, function() {
  outline('hasil - salt water - blue litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - salt water - blue litmus', '', '', undefined);
}, function() {
  outline('hasil - salt water - blue litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - salt water - blue litmus', '', '', undefined);
});
registerOnHover('hasil - salt water - red litmus', false, function() {
  outline('hasil - salt water - red litmus', 'ENABLE');
  handleAnnot(true, 'The Result', 'hasil - salt water - red litmus', '', '', undefined);
}, function() {
  outline('hasil - salt water - red litmus', 'DISABLE');
  handleAnnot(false, '', 'hasil - salt water - red litmus', '', '', undefined);
});

changeVis(['lakmus merah bergerak.001', 'lakmus biru bergerak.001', 'vinegar water - blue litmus', 'vinegar water - red litmus', 'detergent water - blue litmus', 'detergent water - red litmus', 'salt water - blue litmus', 'salt water - red litmus'], false);

changeVis(['hasil - detergent water - blue litmus', 'hasil - detergent water - red litmus', 'hasil - salt water - red litmus', 'hasil - salt water - blue litmus', 'hasil - vinegar water - blue litmus', 'hasil - vinegar water - red litmus'], false);

lakmus_merah = 'not yet';
registerOnClick(['wadah lakmus merah', 'tutup lakmus merah'], false, false, [0,1,2], function() {
  tweenCamera('lakmus merah p', 'lakmus merah d', 2, function() {}, 0);

  operateAnimation('PLAY', ['wadah lakmus merah', 'lakmus merah diam', 'merk lakmus merah', 'lakmus merah bergerak'], null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'tutup lakmus merah', null, null, 'LoopOnce', 1,
          function() {
    changeVis('lakmus merah bergerak.001', true);
    changeVis('lakmus merah bergerak', false);
    tweenCamera('lakmus merah p.001', 'lakmus merah d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'lakmus merah bergerak.001', null, null, 'LoopOnce', 1,
            function() {

      operateAnimation('PLAY', ['wadah lakmus merah', 'lakmus merah diam', 'merk lakmus merah'], null, null, 'LoopOnce', 1,
              function() {
        changeVis('vinegar water - red litmus', true);
        lakmus_merah = 'done';
      }, undefined, true);

          }, undefined, false);

        }, undefined, false);

      }, function() {});

lakmus_biru = 'not yet';
registerOnClick(['wadah lakmus biru ', 'tutup lakmus biru'], false, false, [0,1,2], function() {
  tweenCamera('lakmus biru p', 'lakmus biru d', 2, function() {}, 0);

  operateAnimation('PLAY', ['wadah lakmus biru ', 'lakmus biru diam', 'merk lakmus biru', 'lakmus biru bergerak'], null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'tutup lakmus biru', null, null, 'LoopOnce', 1,
          function() {
    changeVis('lakmus biru bergerak.001', true);
    changeVis('lakmus biru bergerak', false);
    tweenCamera('lakmus biru p.001', 'lakmus biru d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'lakmus biru bergerak.001', null, null, 'LoopOnce', 1,
            function() {

      operateAnimation('PLAY', ['wadah lakmus biru ', 'lakmus biru diam', 'merk lakmus biru'], null, null, 'LoopOnce', 1,
              function() {
        changeVis('vinegar water - blue litmus', true);
        lakmus_biru = 'done';
      }, undefined, true);

          }, undefined, false);

        }, undefined, false);

      }, function() {});

registerOnClick('vinegar water - red litmus', false, false, [0,1,2], function() {
  if (lakmus_merah == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'vinegar water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - vinegar water - red litmus', true);
      changeVis('vinegar water - red litmus', false);
      vinegar___red = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - vinegar water - red litmus', false, false, [0,1,2], function() {
  if (vinegar___red == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - vinegar water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('detergent water - red litmus', true);
      registerSetTimeout(3, function() {
        tweenCamera('lakmus biru p.001', 'lakmus biru d.001', 2, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});

registerOnClick('vinegar water - blue litmus', false, false, [0,1,2], function() {
  if (lakmus_biru == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'vinegar water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - vinegar water - blue litmus', true);
      changeVis('vinegar water - blue litmus', false);
      vinegar___blue = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - vinegar water - blue litmus', false, false, [0,1,2], function() {
  if (vinegar___blue == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - vinegar water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('detergent water - blue litmus', true);
      registerSetTimeout(3, function() {
        tweenCamera('lakmus merah p.001', 'lakmus merah d.001', 2, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});

registerOnClick('detergent water - red litmus', false, false, [0,1,2], function() {
  if (lakmus_merah == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'detergent water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - detergent water - red litmus', true);
      changeVis('detergent water - red litmus', false);
      detergent___red = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - detergent water - red litmus', false, false, [0,1,2], function() {
  if (detergent___red == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - detergent water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('salt water - red litmus', true);
      registerSetTimeout(3, function() {
        tweenCamera('lakmus biru p.001', 'lakmus biru d.001', 2, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});

registerOnClick('detergent water - blue litmus', false, false, [0,1,2], function() {
  if (lakmus_biru == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'detergent water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - detergent water - blue litmus', true);
      changeVis('detergent water - blue litmus', false);
      detergent___blue = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - detergent water - blue litmus', false, false, [0,1,2], function() {
  if (detergent___blue == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - detergent water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('salt water - blue litmus', true);
      registerSetTimeout(3, function() {
        tweenCamera('lakmus merah p.001', 'lakmus merah d.001', 2, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});

registerOnClick('salt water - red litmus', false, false, [0,1,2], function() {
  if (lakmus_merah == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'salt water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - salt water - red litmus', true);
      changeVis('salt water - red litmus', false);
      salt___red = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - salt water - red litmus', false, false, [0,1,2], function() {
  if (salt___red == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - salt water - red litmus', null, null, 'LoopOnce', 1,
            function() {
      registerSetTimeout(3, function() {
        tweenCamera('lakmus biru p.001', 'lakmus biru d.001', 2, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});

registerOnClick('salt water - blue litmus', false, false, [0,1,2], function() {
  if (lakmus_biru == 'done') {
    tweenCamera('larutan p', 'larutan d', 3, function() {}, 0);

    operateAnimation('PLAY', 'salt water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis('hasil - salt water - blue litmus', true);
      changeVis('salt water - blue litmus', false);
      salt___blue = 'done';
    }, undefined, false);

        }
}, function() {});
registerOnClick('hasil - salt water - blue litmus', false, false, [0,1,2], function() {
  if (salt___blue == 'done') {
    tweenCamera('larutan p.001', 'larutan d.001', 3, function() {}, 0);

    operateAnimation('PLAY', 'hasil - salt water - blue litmus', null, null, 'LoopOnce', 1,
            function() {
      changeVis(['slide.001', 'slide.002'], true);
      replaceTexture('Layar TV', 'materi-praktikum.png', './hasil-praktikum.png', function() {});
      registerSetTimeout(3, function() {
        tweenCamera('masuk 3 p', 'masuk 3 d', 3, function() {}, 0);
      });
    }, undefined, false);

        }
}, function() {});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
